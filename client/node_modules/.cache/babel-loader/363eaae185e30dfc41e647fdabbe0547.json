{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samma\\\\Desktop\\\\projects\\\\shop-shop\\\\client\\\\src\\\\components\\\\ProductList\\\\index.js\";\nimport React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentCategory\n  } = state;\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      }); // but let's also take each product and save it to IndexedDB using the helper function\n\n      data.products.forEach(product => {\n        idbPromise(\"products\", \"put\", product);\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, \"Our Products:\"), state.products.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, filterProducts().map(product => /*#__PURE__*/React.createElement(ProductItem, {\n    key: product._id,\n    _id: product._id,\n    image: product.image,\n    name: product.name,\n    price: product.price,\n    quantity: product.quantity,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"You haven't added any products yet!\"), loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: spinner,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 18\n    }\n  }) : null);\n}\n\nexport default ProductList;","map":{"version":3,"sources":["C:/Users/samma/Desktop/projects/shop-shop/client/src/components/ProductList/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","useStoreContext","UPDATE_PRODUCTS","idbPromise","ProductList","state","dispatch","currentCategory","loading","data","type","products","forEach","product","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,WAAT,GAAuB;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,eAAe,EAAzC;AAEA,QAAM;AAAEM,IAAAA;AAAF,MAAsBF,KAA5B;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBZ,QAAQ,CAACE,cAAD,CAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIa,IAAJ,EAAU;AACR;AACAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAER,eADC;AAEPS,QAAAA,QAAQ,EAAEF,IAAI,CAACE;AAFR,OAAD,CAAR,CAFQ,CAOR;;AACAF,MAAAA,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAuBC,OAAD,IAAa;AACjCV,QAAAA,UAAU,CAAC,UAAD,EAAa,KAAb,EAAoBU,OAApB,CAAV;AACD,OAFD;AAGD;AACF,GAdQ,EAcN,CAACJ,IAAD,EAAOD,OAAP,EAAgBF,QAAhB,CAdM,CAAT;;AAgBA,WAASQ,cAAT,GAA0B;AACxB,QAAI,CAACP,eAAL,EAAsB;AACpB,aAAOF,KAAK,CAACM,QAAb;AACD;;AAED,WAAON,KAAK,CAACM,QAAN,CAAeI,MAAf,CACJF,OAAD,IAAaA,OAAO,CAACG,QAAR,CAAiBC,GAAjB,KAAyBV,eADjC,CAAP;AAGD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEGF,KAAK,CAACM,QAAN,CAAeO,MAAf,gBACC;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,cAAc,GAAGK,GAAjB,CAAsBN,OAAD,iBACpB,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACI,GADf;AAEE,IAAA,GAAG,EAAEJ,OAAO,CAACI,GAFf;AAGE,IAAA,KAAK,EAAEJ,OAAO,CAACO,KAHjB;AAIE,IAAA,IAAI,EAAEP,OAAO,CAACQ,IAJhB;AAKE,IAAA,KAAK,EAAER,OAAO,CAACS,KALjB;AAME,IAAA,QAAQ,EAAET,OAAO,CAACU,QANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADD,gBAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAhBJ,EAkBGf,OAAO,gBAAG;AAAK,IAAA,GAAG,EAAER,OAAV;AAAmB,IAAA,GAAG,EAAC,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAyC,IAlBnD,CADF;AAsBD;;AAED,eAAeI,WAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport ProductItem from \"../ProductItem\";\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\nimport spinner from \"../../assets/spinner.gif\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductList() {\n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    // if there's data to be stored\n    if (data) {\n      // let's store it in the global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      // but let's also take each product and save it to IndexedDB using the helper function\n      data.products.forEach((product) => {\n        idbPromise(\"products\", \"put\", product);\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n"]},"metadata":{},"sourceType":"module"}